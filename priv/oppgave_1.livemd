# Blinkende LED-lys

## Introduksjon

I denne oppgaven er m√•let √• bli kjent med LED-lysene som f√∏gler med Raspberry Pi-boardet ditt.

Alle LED-lysene befinner seg under `/sys/class/leds`, og for √• verifisere dette kan vi liste ut det som eksisterer i `leds`-mappen gjennom √• bruke `File.ls("/sys/class/leds")`.

```elixir
led_base_path = "/sys/class/leds"
File.ls(led_base_path)
```

N√•r vi kj√∏rer kodesnuttene ovenfor f√•r vi tilbake en tuppel der f√∏rste-elementet, `:ok`, indikerer at kommandoen returnerte et forventet resultat, alts√• `{:ok, ["led0", "led1", ...]}`. Dersom vi hadde fors√∏kt √• lese en mappe som ikke eksisterer ville vi f√•tt `{:error, :enoent}` i stedet, noe som gj√∏r at vi kan h√•ndtere feil uten √• f√• kj√∏retidsproblemer. Dette medf√∏rer derimot at vi alltid m√• h√•ndtere b√•de vellykkede (`:ok`) og mislykkede (`:error`) resultater, som i tilfelle der man leser filer fra en kjent mappestruktur er litt overkill. Ved √• heller benytte `File.ls!(...)` godtar vi kun `:ok` som resultat ved √• kun returnere den vellykkede responsen, og kaster heller `File.Error` ved kj√∏retid dersom for eksempel mappen ikke eksisterer

```elixir
led_base_path = "/sys/class/leds"
File.ls!(led_base_path)
```

## Endre LED-lysenes tilstand

Vi kan n√• velge ett av LED-lysene, for eksempel `led0`, og se hvilke valg vi har gjennom

```elixir
led = Path.join(led_base_path, "led0")
File.ls!(led)
```

Her finner vi blant annet `brightness`, og vi kan lese av den n√•v√¶rende `brightness`-verdien gjennom

```elixir
File.read(Path.join(led, "brightness"))
```

Vi √∏nsker n√• √• s√∏rge for at det valgte LED-lyset er i en kjent tilstand (avskrudd) f√∏r vi begynner √• leke med det. I v√•rt tilfelle gj√∏res dette ved √• f√∏rst sette `trigger`-typen til `none`, for deretter √• sette `brightness` til `0`. Vi kan endre tilstanden til LED-lys ved √• benytte `File.write/2` (her indikerer `/2` at funksjonen `File.write` tar inn to parametere). F√∏rste parameter er hele pathen til parameteren vi √∏nsker √• oppdatere, andre parameter er den nye tilstanden/verdien vi √∏nsker √• oppdatere til. F√∏lg gjerne med p√• LED-lysene p√• din Raspberry Pi n√•r du kj√∏rer disse kommandoene og se om det skjer en endring!

```elixir
File.write(Path.join(led, "trigger"), "none")
File.write(Path.join(led, "brightness"), "0")
```

Tilsvarende kan du skru lyset p√• igjen.

```elixir
File.write(Path.join(led, "brightness"), "1")
```

## Blinking gjennom `trigger`

Tidligere satte vi `trigger` til √• v√¶re `none`. Vi kan bruke ulike triggere til √• bestemme hvilke betingelser lyset skal skrus av og p√• med, og s√• fikser Linux-operativsystemet resten. For √• finne ut hva slags trigger-snacks vi har √• velge mellom kan vi lese innholdet i `trigger`-mappen.

```elixir
File.read!(Path.join(led, "trigger"))
```

Her finnes det en rekke ulike m√•ter √• kontrollere LED-lysene p√•, blant annet basert p√• CPU-aktivitet, diskaktivitet og WiFi-aktivitet. Velger du for eksempel triggeren `rfkill0` vet du at Raspberry Pi'en har internettforbindelse s√• lenge den valgte LED-en har konstant lys.

Vi kan ogs√• sette et lysm√∏nster som gjentas for alltid gjennom `timer`-triggeren.

```elixir
File.write(Path.join(led, "trigger"), "timer")
```

Dette gir oss et lysm√∏nster som flasher med ett sekunds mellomrom. Et annet lysm√∏nster vi kan velge er `heartbeat`, mon tro hva det gj√∏r? ü§î

```elixir
File.write(Path.join(led, "trigger"), "heartbeat")
```

For √• styre LED-lyset med `brightness`-filen kan vi igjen sette `trigger` til `none`.

```elixir
File.write(Path.join(led, "trigger"), "none")
File.read!(Path.join(led, "brightness"), "0")
```

## (valgfritt) Lag ditt eget lysm√∏nster

Triggere for `heartbeat` og `timer` som pulserer med en fast frekvens er vel og bra, men det er liksom ikke _v√•rt_ lysm√∏nster. M√•let med denne oppgaven er √• lage et eget m√∏nster.

Det er flere m√•ter √• f√• til dette p√•. Pr√∏v litt p√• egenh√•nd ‚Äì husk, internettet er din venn!

<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>

_Psst, her er et tips hvis du st√•r fast!_

_√ân mulighet er √• benytte `delay_on` og `delay_off` som ligger under hvert enkelt LED-lys. Dette krever at vi benytter `timer`-triggeren fra tidligere._
